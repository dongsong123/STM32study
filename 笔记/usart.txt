RX232:
高电平：+15v
低电平：-15v
TTL:
高电平：+3.3v或+5v
低电平：0v

void USART2_Init(u32 bound)
{
		GPIO_InitTypeDef GPIO_InitStructure;
		USART_InitTypeDef USART_InitStructure;
		NVIC_InitTypeDef NVIC_InitStructure;
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE); //使能PA时钟
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);//使能串口2时钟
	
		NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn; //开启串口2中断
		NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0; //抢占优先级为最高
		NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;   //响应优先级为最高
		NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;  //使能中断
		NVIC_Init(&NVIC_InitStructure);
	
		GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;  
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
		GPIO_Init(GPIOA, &GPIO_InitStructure);//PA2为发送引脚，因此要配置成复用输出模式
	
		GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
		GPIO_Init(GPIOA, &GPIO_InitStructure);//PA3为接收引脚，因此要配置成浮空输入模式
	
		USART_InitStructure.USART_BaudRate = bound; //波特率
		USART_InitStructure.USART_WordLength = USART_WordLength_8b; //8位数据位
		USART_InitStructure.USART_StopBits = USART_StopBits_1; //1位停止位
		USART_InitStructure.USART_Parity = USART_Parity_No; //无奇偶校验位
		USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;  //使能发送接收
		USART_InitStructure.USART_HardwareFlowControl=USART_HardwareFlowControl_None; 
		USART_Init(USART2,&USART_InitStructure);        //不使能硬件流控制
		
		USART_Cmd(USART2,ENABLE);   //使能串口2
		USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);   //使能接收中断
		
}


串口的发送函数
void USART2_SendString(u8 *str)
{
		u8 index = 0;
		do
		{
				USART_SendData(USART2,str[index]); //发送数据
				while(USART_GetFlagStatus(USART2, USART_FLAG_TXE) == 0);  //是否发送完成
				index++;
		}while(str[index] != 0);



串口接收函数
RXBUF是用来储存串口的接收数据的，RXOVER为接收串口结束标志位，RXCUNT为串口接收计数值
void USART2_IRQHandler(void)
{	
		u8 temp;
		if(USART_GetITStatus(USART2,USART_IT_RXNE) == SET)
		{
				USART_ClearITPendingBit(USART2,USART_IT_RXNE);
				temp =  USART_ReceiveData(USART2);
				if(temp == '\n')
				{
						RXCUNT = 0;
						RXOVER = 1;
						USART_ITConfig(USART2, USART_IT_RXNE, DISABLE);
				}else
				{
						RXBUF[RXCUNT] = temp;
						RXCUNT++;
				}
		}
}
